#!/bin/bash
### BEGIN INIT INFO
# Provides:          redis sentinel
# Required-Start:    $all
# Required-Stop:    $all
# Default-Start:    2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts redis sentinel
# Description:      Starts redis sentinel using start-stop-daemon
### END INIT INFO

NAME=redis-sentinel
DESC=redis-sentinel
BIN=/usr/bin/redis-server
SENTINEL_PID=/var/run/redis-sentinel.pid
CMD=$1

start() {
        echo "Starting $NAME ..."
        exec 2>&1 $BIN /etc/redis/sentinel.conf --sentinel | logger -t sentinel &
        /usr/bin/pgrep -f "/usr/bin/redis-server <%= @mgmt %>:26379" >  "${SENTINEL_PID}";
}

stop() {
        PID=`cat $SENTINEL_PID`
        echo "Stopping $NAME ($PID) ..."
        kill $PID
}

restart() {
        echo "Restarting $NAME ..."
        stop
        start
}
status() {
  if [ -f "$SENTINEL_PID" ] ; then
    pid=$(cat "$SENTINEL_PID")
    if ps -p $pid > /dev/null 2> /dev/null ; then
      # process by this pid is running.
      # It may not be our pid, but that's what you get with just pidfiles.
      # TODO(sissel): Check if this process seems to be the same as the one we
      # expect. It'd be nice to use flock here, but flock uses fork, not exec,
      # so it makes it quite awkward to use in this case.
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}


case "$CMD" in
        start)
                start
                ;;
        stop)
                stop
                ;;
        restart)
                restart
                ;;
        status)
                status
                code=$?
                if [ $code -eq 0 ] ; then
                  echo "$NAME is running"
                else
                  echo "$NAME is not running"
                fi
                exit $code
                ;;

        *)
                echo "Usage $0 {start|stop|restart}"
esac
